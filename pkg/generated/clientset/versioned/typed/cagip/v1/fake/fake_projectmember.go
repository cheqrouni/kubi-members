// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	cagipv1 "github.com/ca-gip/kubi-members/pkg/apis/cagip/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeProjectMembers implements ProjectMemberInterface
type FakeProjectMembers struct {
	Fake *FakeCagipV1
	ns   string
}

var projectmembersResource = schema.GroupVersionResource{Group: "cagip.github.com", Version: "v1", Resource: "projectmembers"}

var projectmembersKind = schema.GroupVersionKind{Group: "cagip.github.com", Version: "v1", Kind: "ProjectMember"}

// Get takes name of the projectMember, and returns the corresponding projectMember object, and an error if there is any.
func (c *FakeProjectMembers) Get(ctx context.Context, name string, options v1.GetOptions) (result *cagipv1.ProjectMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(projectmembersResource, c.ns, name), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}

// List takes label and field selectors, and returns the list of ProjectMembers that match those selectors.
func (c *FakeProjectMembers) List(ctx context.Context, opts v1.ListOptions) (result *cagipv1.ProjectMemberList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(projectmembersResource, projectmembersKind, c.ns, opts), &cagipv1.ProjectMemberList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &cagipv1.ProjectMemberList{ListMeta: obj.(*cagipv1.ProjectMemberList).ListMeta}
	for _, item := range obj.(*cagipv1.ProjectMemberList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested projectMembers.
func (c *FakeProjectMembers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(projectmembersResource, c.ns, opts))

}

// Create takes the representation of a projectMember and creates it.  Returns the server's representation of the projectMember, and an error, if there is any.
func (c *FakeProjectMembers) Create(ctx context.Context, projectMember *cagipv1.ProjectMember, opts v1.CreateOptions) (result *cagipv1.ProjectMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(projectmembersResource, c.ns, projectMember), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}

// Update takes the representation of a projectMember and updates it. Returns the server's representation of the projectMember, and an error, if there is any.
func (c *FakeProjectMembers) Update(ctx context.Context, projectMember *cagipv1.ProjectMember, opts v1.UpdateOptions) (result *cagipv1.ProjectMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(projectmembersResource, c.ns, projectMember), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}

// Delete takes name of the projectMember and deletes it. Returns an error if one occurs.
func (c *FakeProjectMembers) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(projectmembersResource, c.ns, name, opts), &cagipv1.ProjectMember{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeProjectMembers) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(projectmembersResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &cagipv1.ProjectMemberList{})
	return err
}

// Patch applies the patch and returns the patched projectMember.
func (c *FakeProjectMembers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *cagipv1.ProjectMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(projectmembersResource, c.ns, name, pt, data, subresources...), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}

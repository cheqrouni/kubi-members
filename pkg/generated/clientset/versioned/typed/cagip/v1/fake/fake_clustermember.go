// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	cagipv1 "github.com/ca-gip/kubi-members/pkg/apis/cagip/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterMembers implements ClusterMemberInterface
type FakeClusterMembers struct {
	Fake *FakeCagipV1
}

var clustermembersResource = schema.GroupVersionResource{Group: "cagip.github.com", Version: "v1", Resource: "clustermembers"}

var clustermembersKind = schema.GroupVersionKind{Group: "cagip.github.com", Version: "v1", Kind: "ClusterMember"}

// Get takes name of the clusterMember, and returns the corresponding clusterMember object, and an error if there is any.
func (c *FakeClusterMembers) Get(ctx context.Context, name string, options v1.GetOptions) (result *cagipv1.ClusterMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clustermembersResource, name), &cagipv1.ClusterMember{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ClusterMember), err
}

// List takes label and field selectors, and returns the list of ClusterMembers that match those selectors.
func (c *FakeClusterMembers) List(ctx context.Context, opts v1.ListOptions) (result *cagipv1.ClusterMemberList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clustermembersResource, clustermembersKind, opts), &cagipv1.ClusterMemberList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &cagipv1.ClusterMemberList{ListMeta: obj.(*cagipv1.ClusterMemberList).ListMeta}
	for _, item := range obj.(*cagipv1.ClusterMemberList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterMembers.
func (c *FakeClusterMembers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clustermembersResource, opts))
}

// Create takes the representation of a clusterMember and creates it.  Returns the server's representation of the clusterMember, and an error, if there is any.
func (c *FakeClusterMembers) Create(ctx context.Context, clusterMember *cagipv1.ClusterMember, opts v1.CreateOptions) (result *cagipv1.ClusterMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clustermembersResource, clusterMember), &cagipv1.ClusterMember{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ClusterMember), err
}

// Update takes the representation of a clusterMember and updates it. Returns the server's representation of the clusterMember, and an error, if there is any.
func (c *FakeClusterMembers) Update(ctx context.Context, clusterMember *cagipv1.ClusterMember, opts v1.UpdateOptions) (result *cagipv1.ClusterMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clustermembersResource, clusterMember), &cagipv1.ClusterMember{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ClusterMember), err
}

// Delete takes name of the clusterMember and deletes it. Returns an error if one occurs.
func (c *FakeClusterMembers) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(clustermembersResource, name, opts), &cagipv1.ClusterMember{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterMembers) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clustermembersResource, listOpts)

	_, err := c.Fake.Invokes(action, &cagipv1.ClusterMemberList{})
	return err
}

// Patch applies the patch and returns the patched clusterMember.
func (c *FakeClusterMembers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *cagipv1.ClusterMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clustermembersResource, name, pt, data, subresources...), &cagipv1.ClusterMember{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ClusterMember), err
}
